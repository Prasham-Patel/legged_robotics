%% TEST
%% Real values
sr1 = [96.6610, 81.7602, 1.0684];
sr2 = [22.2476, 125.2511, -0.5530];
sr3 = [-122.4519 36.6453 4.3547];
sr4 = [-120.6859 -34.4565 -4.9014];
sr5 = [24.7769 -125.0489 -4.8473];
sr6 = [91.3462 -80.9866 0.2515];

sr = [sr1, sr2, sr3, sr4, sr5, sr6]

ur1 = [305.2599 115.0695 2.6210];
ur2 = [-55.2814 322.9819 4.2181];
ur3 = [-244.7954 208.0087 3.9365];
ur4 = [-252.5755 -211.8783 -3.0];
ur5 = [-53.9678 -320.6115 4.3];
ur6 = [302.4266 -109.4351 3.381];

ur = [ur1, ur2, ur3, ur4, ur5, ur6]

lr = [604.4299 607.2473 600.4441 605.9031 604.5251 600.0616];


%% Config points
P1 = [-240, 220, 970, 0, 0, 0]';
P2 = [-340, 300, 890, 0, 0, 0]';
P3 = [-220, 800, 400, 0, 0, 0]';
P4 = [700, 380, 400, 0, 0, 0]';
P5 = [600, -120, 460, 0, 0, 0]';
P6 = [-220, 280, 960, 0, 0, 0]';
P7 = [-200, -620, 700, 0, 0, 0]';
P8 = [220, 580, 740, 0, 0, 0]';
P9 = [160, 680, 640, 0, 0, 0]';
P10 = [-180, -260, 980, 0, 0, 0]';
P11 = [-260, 540, 770, 0, 0, 0]';
P12 = [160, -420, 890, 0, 0, 0]';
P13 = [-160, 280, 970, 0, 0, 0]';
P14 = [140, -240, 990, 0, 0, 0]';
P15 = [380, -520, 730, 0, 0, 0]';
P16 = [-380, 540, 710, 0, 0, 0]';
P17 = [-400, 560, 670, 0, 0, 0]';
P18 = [400, -580, 650, 0, 0, 0]';

config_points = [P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, P16, P17, P18];

%% nominal starting length
nominal_lor = [604.8652, 604.8652, 604.8652, 604.8652, 604.8652, 604.8652]';

%% Find delta_l_nominal
for i = 1:length(config_points(1, :))
    nominal_l(1:6, i) = expected_IK(config_points(1:6, i), 'xyz');
    delta_l_nom(1:6, i) = nominal_l(1:6, i) - nominal_lor;
end

%% find the actual position of the end-effector by FK
for i = 1:length(config_points(1,:))
    P_real(1:6, i) = real_FK(config_points(1:6, i), (delta_l_nom(1:6, i) + lr'), 'xyz')
end

%% Nominal values, our intial guess for calibration
s1 = [92.1597 84.4488 0];
s2 = [27.055 122.037 0];
s3 = [-119.2146 37.5882 0];
s4 = [-119.2146 -37.5882 0];
s5 = [27.055 -122.037 0];
s6 = [92.1597 -84.4488 0];

s = [s1, s2, s3, s4, s5, s6]

u1 = [305.4001 111.1565 0];
u2 = [-56.4357 320.0625 0];
u3 = [-248.9644 208.9060 0];
u4 = [-248.9644 -208.9060 0];
u5 = [-56.4357 -320.0625 0];
u6 = [305.4001 -111.1565 0];

u = [u1, u2, u3, u4, u5, u6]

l = [604.8652 604.8652 604.8652 604.8652 604.8652 604.8652];

% test the cost function
% cost must be zero
cost_function([sr,ur,lr]) 

sol = lsqnonlin(@cost_function, [s, u, l]);
init_error = [sr, ur, lr] - [s, u, l]
final_error = [sr, ur, lr] - sol
x = 1:42;
bar(x, [abs(init_error); abs(final_error)])